section	.text
   global _start     ;must be declared for linker (ld)
	
_start:	            ;tells linker entry point
   mov	edx,len     ;message length
   mov	ecx,msg     ;message to write
   mov	ebx,1       ;file descriptor (stdout)
   mov	eax,4       ;system call number (sys_write)
   int	0x80        ;call kernel
	
   mov	eax,1       ;system call number (sys_exit)
   int	0x80        ;call kernel

section	.data
msg db 'Hello, world!', 0xa  ;string to be printed
len equ $ - msg     ;length of the string

There are ten 32-bit and six 16-bit processor registers in IA-32 architecture. The registers are grouped into three categories −

General registers,
Control registers, and
Segment registers.
The general registers are further divided into the following groups −

Data registers,
Pointer registers, and
Index registers.

https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm



%rax, %rbx, %rcx, %rdx, %rdi, %rsi, %rbp,
%rsp, and %r8-r15. Of these, %rax, %rcx, %rdx, %rdi, %rsi, %rsp, and %r8-r11 Are not saved between function calls. Volatile, don't have to ve pushed/popped

registers %rbx, %rbp, and %r12-r15 are saved after functions finish. Must push/pop

%rsp is the stack pointer to the topmost element of the stack


; section .data <- for declaring consts
; section .bss <- for declaring variables

; use rcx to iterate

; You can't move anything from memory to memory, but need to use a temporary register

